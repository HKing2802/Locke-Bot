const fs = require('fs');
const { Message } = require('discord.js');
const { log } = require('../src/util.js');

/**
 * Gets functions from a wordlist and their provided file
 * See ping file for proper structure to a command file
 * @param {Array<string>} nameList Array of names for the files. Generally gotten from the config file
 * @returns {Map<string, Function>}
 */
function getFunctions(nameList) {
    let commands = new Map();

    for (let i = 0; i < nameList.length; i++) {
        // iterates over list of filenames and imports their name and main functions
        if (commands.has(nameList[i])) {
            log("Attempting to import command already in command list. Skipping over...", undefined, false, 'warn');
            continue;
        }

        // constructs path from filename
        const path = "./" + nameList[i] + ".js";
        const pathcheck = "./commands/" + nameList[i] + ".js";

        // checks that the file exists
        if (fs.existsSync(pathcheck)) {
            const functionImport = require(path);

            // imports name and function
            const name = functionImport.name;
            const func = functionImport.main;

            // adds command to dictionary
            commands.set(name, func);

            // checks for aliases and adds them to the command dictionary
            if (functionImport.data && functionImport.data.aliases && Array.isArray(functionImport.data.aliases)) {
                for (const alias of functionImport.data.aliases)
                    commands.set(alias, func);
            }
        } else {
            log("Attempting to import command with missing file. Skipping over...", undefined, false, 'warn');
        }
    }
    return commands;
}

/**
 * Process the message for the commands
 * @param {Message} message the message to process
 * @param {Map<string, Function>} commands Map of commands to be used, generated by getFunctions
 * @returns {Promise<any>}
 */
async function process(message, commands) {
    // verifies that commands parameter is a map
    if (!(commands instanceof Map)) {
        log(`Commands parameter is not Map, instead is ${typeof commands}`, undefined, false, 'error');
        return;
    }

    // parses messgae to command and arguments
    const cmdparsed = message.content.substring(1).toLowerCase().split(" ");
    const cmd = cmdparsed[0];
    const args = cmdparsed.splice(1);


    // iterates over commands map to find function of command
    for (let [name, func] of commands) {
        if (name === cmd) {
            return func(message, args);
        }
    }
}

exports.process = process;
exports.getFunctions = getFunctions;