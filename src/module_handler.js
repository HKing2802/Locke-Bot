/* Gets and runs all modules
 */
const { log, sleep } = require('./util.js');
const { Client } = require('discord.js');
const fs = require('fs');

/**
 * Gets module functions and names from an array of objects
 * @param {Array<Object>} moduleList Array of objects with name and path
 * @param {string} moduleList.name Name of module
 * @param {string} moduleList.path Path of the module file
 * @param {boolean} stop If true gets the stop functions for the modules
 * @returns {Map<string, Function>}
 */
function getModules(moduleList, stop) {
    const modules = new Map();

    for (module of moduleList) {
        // checks if already loaded
        if (modules.has(module.name)) {
            log("Attempting to import module already in module list, Skipping over...", undefined, false, 'warn');
            continue;
        }

        // constructs paths
        let path = `../modules/${module.path}`;
        let pathcheck = `./modules/${module.path}`;

        if (fs.existsSync(pathcheck)) {
            const functionImport = require(path);

            let func;
            if (stop) func = functionImport.stop;
            else func = functionImport.start;
            if (func === undefined && !stop) func = functionImport.main;

            if (!stop || (stop && func)) modules.set(module.name, func);
        } else {
            log("Attempting to import module with missing file. Skipping over...", undefined, false, 'warn');
        }
    }
    return modules
}

/**
 * Iterates through given modules map and starts each module
 * Logs each started module and any errors starting modules
 * Returns number of started modules
 * @param {Map<string, Function>} modules Map of modules to start, generated by getModules
 * @param {Client} client The client of the bot
 * @returns {number};
 */
async function startModules(modules, client) {
    if (!(modules instanceof Map)) {
        log(`Modules parameter is not Map, instead is ${typeof modules}`, undefined, false, 'error');
        return -1;
    }

    let started = 0;

    // iterates over module and starts each
    for (const [name, func] of modules) {
        try {
            func(client);
            log(`Started module ${name}`, client, false);
            started += 1;
        } catch (err) {
            log(`Error starting module ${name}: ${err}`, client, false);
        }
        //await sleep(1000);s
    }
    return started;
}

async function stopModules(modules, client) {
    if (!(modules instanceof Map)) {
        log(`Modules parameter is not Map, instead is ${typeof modules}`, undefined, false, 'error');
        return;
    }

    for (const [name, func] of modules) {
        try {
            await func(client);
            console.log(`Stopped module ${name}`);
        } catch (err) {
            console.log(`Error stopping module ${name}: ${err}`);
        }
    }
}

exports.startModules = startModules;
exports.getModules = getModules;
exports.stopModules = stopModules;